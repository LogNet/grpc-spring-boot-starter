import org.lognet.springboot.grpc.gradle.ReactiveFeature

buildscript {
    ext.kotlin_version = '1.9.10'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.netflix.nebula:nebula-project-plugin:11.0.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id "io.github.lognet.grpc-spring-boot"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.netflix.nebula.facet"

facets {
    pureNettyTest
    kafkaStreamTest
    reactiveTest
    customSecurityTest
    bothPureAndShadedNettyTest
    noConsulDependenciesTest
}

grpcSpringBoot {
    grpcSpringBootStarterVersion.set((String) null)
    reactiveFeature.set(ReactiveFeature.REACTOR)
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
configurations.findAll { cfg ->
    if (cfg.name.startsWith("pureNetty")) {
        cfg.exclude group: 'io.grpc', module: 'grpc-netty-shaded'

    }

    if (cfg.name.startsWith("customSecurity")) {
        cfg.exclude group: 'org.springframework.security', module: 'spring-security-oauth2-resource-server'
        cfg.exclude group: 'org.springframework.security', module: 'spring-security-oauth2-jose'
    }
    if (cfg.name.startsWith("noConsulDependencies")) {
        cfg.exclude group: 'org.springframework.cloud', module: 'spring-cloud-starter-consul-discovery'

    }
}

facets.each {
    if (it.name.endsWith("Test")) {
        configurations.getByName("${it.name}Implementation").extendsFrom(configurations.testImplementation)
        configurations.getByName("${it.name}RuntimeOnly").extendsFrom(configurations.testRuntimeOnly)

        dependencies.add("${it.name}Implementation", sourceSets.test.output)

        tasks.test.dependsOn it.name
    }
}

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-oauth2-jose"
    implementation "org.springframework.security:spring-security-oauth2-resource-server"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.springframework:spring-tx'



    implementation("javax.annotation:javax.annotation-api:1.3.2")
    implementation project(':grpc-spring-boot-starter')
    implementation project(':grpc-client-spring-boot-starter')

    testImplementation 'org.springframework.boot:spring-boot-starter-aop'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.github.stefanbirkner:system-rules:1.18.0'
    testImplementation('org.springframework.cloud:spring-cloud-starter-consul-discovery')
    testImplementation 'org.awaitility:awaitility:4.0.3'
    testImplementation "org.springframework.cloud:spring-cloud-config-server"
    testImplementation "org.springframework.cloud:spring-cloud-config-client"
    testImplementation "org.springframework.cloud:spring-cloud-starter-bootstrap"

    testImplementation "com.playtika.testcontainers:embedded-keycloak:3.1.11"
    testImplementation "com.playtika.testcontainers:embedded-consul:3.1.11"


    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.mockito:mockito-core:2.23.0'


    pureNettyTestImplementation "io.grpc:grpc-netty"


    bothPureAndShadedNettyTestImplementation "io.grpc:grpc-netty:${grpcVersion}"

    kafkaStreamTestImplementation "com.playtika.testcontainers:embedded-kafka:3.1.11"
    kafkaStreamTestImplementation "org.springframework.cloud:spring-cloud-starter-stream-kafka"

    reactiveTestImplementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    reactiveTestImplementation 'org.postgresql:r2dbc-postgresql'
    reactiveTestImplementation 'org.postgresql:postgresql'
    reactiveTestImplementation "com.playtika.testcontainers:embedded-postgresql:3.1.11"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"


}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if ("io.grpc".equalsIgnoreCase(details.requested.group)) {
            details.useVersion grpcVersion
        }
    }
}

test {
    jvmArgs('--add-opens=java.base/java.util=ALL-UNNAMED')
}
bootJar{
    enabled false
}
jar{
    enabled true
}
compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }
}







