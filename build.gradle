buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
        maven { url "https://plugins.gradle.org/m2/" }

        maven { url 'https://repo.spring.io/snapshot' }


    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.16'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.30.0"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
    }
}

allprojects { pr ->
    pr['signing.keyId'] = System.getenv('GPG_ID')
    pr['signing.password'] = System.getenv('GPG_PASSWORD')
    pr['signing.secretKeyRingFile'] = '/home/travis/.gnupg/secring.gpg'


}
apply plugin: 'idea'
apply plugin: 'jacoco'
apply from: "${rootDir}/publishSonatype.gradle"


allprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/release' }
        maven { url "https://jitpack.io" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://repo.spring.io/milestone" }

    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'


    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile,{
        options.compilerArgs.addAll(["--release", "8"])
    })


    test {
     //   forkEvery = 1
        testLogging {
            exceptionFormat = 'full'
        }
    }


    dependencies {
        ["annotationProcessor", "testAnnotationProcessor", "compileOnly", "testCompileOnly"].each { conf ->
            add(conf, "org.projectlombok:lombok:1.18.12")
        }
   }

}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    sourceSets (project('grpc-spring-boot-starter').sourceSets.main
            ,project('grpc-client-spring-boot-starter').sourceSets.main)

    reports {
        xml.enabled true
        xml.destination  = new File(buildDir,"reports/jacoco/report.xml")
        html.enabled true
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}


